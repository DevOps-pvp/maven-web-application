pipeline{
    agent
    {
        label "master_pvp"
    }//agent
    
    tools{
        maven "Maven V3.8.6"
    }//tools
    
    
    stages{
        
        stage("Checkout Code"){
            steps{
                git credentialsId: '1f554e08-c1a6-4154-a352-be4158aa1bcf', url: 'https://github.com/DevOps-pvp/maven-web-application.git'
            }//steps
        }//stage_Checkout Code
    
        
        stage("Maven Build"){
            steps{
                sh "mvn clean package"
            }//steps
        }//Stage_Maven Build
        
    /*    
        stage("SonarQube Report"){
            steps{
                sh "mvn sonar:sonar"
            }//steps
        }//stage_SonarQube Report
    */    
       
       // Copying package & Dockerfile from Master to Docker_slave Server
        stage("scp Master to Docker_Slave"){
            steps{
                sshagent(['2ca474ad-2ee3-4c96-9017-e40f0e759f21']) {
                    sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ubuntu@172.31.5.161:/home/ubuntu/docker_slave/Applications/maven-web-application.war"
                    sh "scp -o StrictHostKeyChecking=no Dockerfile ubuntu@172.31.5.161:/home/ubuntu/docker_slave/Applications/Dockerfile"
                }//sshagent
            }//step
        }//stage
        
        //Switching from master to DockerBuild_slave ... Build the image & Push to DockerHub
        stage("Switching to Docker Slave & Build"){
            steps{
                node ("DockerBuild_Slave"){
                    sh "docker build -t 816273016234.dkr.ecr.ap-south-1.amazonaws.com/mavenwebapp:latest /home/ubuntu/docker_slave/Applications/" 
                    sh "docker images"
                    sh "aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 816273016234.dkr.ecr.ap-south-1.amazonaws.com"
                    sh "docker push 816273016234.dkr.ecr.ap-south-1.amazonaws.com/mavenwebapp:latest"
                }//node
            }//steps
        }//stage
    
        
        //Switching to DockerDeploy_Slave ... Pull the image, Create the container & Start the container
        stage("Pull & Run Container"){
            steps{
                node ("DockerDeploy_Slave"){
                    sh "aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 816273016234.dkr.ecr.ap-south-1.amazonaws.com"
                    sh "docker pull 816273016234.dkr.ecr.ap-south-1.amazonaws.com/mavenwebapp:latest"
                    sh "docker rm -f mavencontainer"
                    sh "docker create --name mavencontainer -p 8080:8080 816273016234.dkr.ecr.ap-south-1.amazonaws.com/mavenwebapp:latest"
                    sh "docker start mavencontainer"
                    sh "docker ps"
                }//node
            }//steps
        }//stage
  
    }//stages
}//pipeline
